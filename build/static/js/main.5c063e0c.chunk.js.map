{"version":3,"sources":["QuizContext.js","components/Countdown.js","components/Nav.js","pages/CompletedPage.js","shuffle.js","HashIds.js","pages/IndexPage.js","components/SubmitModal.js","pages/QuestionPage.js","pages/SubmitPage.js","AppRouter.js","App.js","reportWebVitals.js","index.js"],"names":["QuizContext","createContext","quiz","completed","score","correct","incorrectAnswers","questionOrder","answers","startTime","endTime","durationSeconds","timeLimitMinutes","currentIndex","title","questions","type","choices","answer","setQuiz","padStart","subject","length","char","toString","Countdown","props","ref","useRef","useEffect","timer","needsInterval","update","now","Date","ms","Math","max","endAt","seconds","floor","minutes","hours","days","string","clearInterval","onEnd","endText","current","innerText","alwaysCreateTimer","setInterval","className","Nav","useContext","useNavigate","bg","position","p","align","maxWidth","mx","minHeight","as","fontSize","fontWeight","m","lineHeight","ml","navigator","bottom","height","width","transition","h","Panel","heading","children","boxShadow","borderRadius","mb","color","CompletedPage","navigate","maxW","my","setTimeout","shuffle","array","i","j","random","temp","hashIds","HashIds","encodeId","id","encode","IndexPage","useState","loading","setLoading","show","setShow","showDetails","setShowDetails","in","Quiz","mt","rightIcon","colorScheme","size","onClick","Array","from","keys","shuffleQuestionOrder","shuffleMultipleChoiceOrder","forEach","question","isArray","isLoading","cursor","_hover","textDecoration","userSelect","SubmitModal","isOpen","onClose","onSubmit","submitting","setSubmitting","mr","QuestionPage","number","useParams","showSubmit","setShowSubmit","document","activeElement","blur","decodedNumber","str","parseInt","decode","index","setAnswer","newAnswer","newAnswers","map","choice","justifyContent","isChecked","onInput","e","target","value","placeholder","leftIcon","JSON","stringify","SubmitPage","correctAnswers","givenAnswer","toLowerCase","includes","push","textAlign","AppRouter","path","element","App","quizValue","useMemo","Provider","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOAEaA,EAAcC,wBAAc,CACvCC,KAAM,CACJC,WAAW,EACXC,MAAO,EACPC,QAAS,EACTC,iBAAkB,GAClBC,cAAe,GACfC,QAAS,GACTC,UAAW,EACXC,QAAS,EACTC,gBAAiB,EACjBC,iBAAkB,EAClBC,cAAe,EACfC,MAAO,GACPC,UAAW,CACT,CACEC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRV,QAAS,MAIfW,QAAS,SAACjB,O,OCvBZ,SAASkB,EAASC,EAASC,EAAQC,GAGjC,IAFAF,EAAUA,EAAQG,WAEXH,EAAQC,OAASA,GACtBD,EAAUE,EAAOF,EAGnB,OAAOA,EAGM,SAASI,EAAUC,GAChC,IAAIC,EAAMC,mBA8DV,OA5DAC,qBAAU,WACR,IAgDIC,EAhDAC,GAAgB,EAEpB,SAASC,IACP,IAAIC,EAAMC,KAAKD,MACXE,EAAKC,KAAKC,IAAI,EAAGX,EAAMY,MAAQL,GAE/BM,EAAUH,KAAKI,MAAML,EAAK,KAC1BM,EAAUL,KAAKI,MAAMD,EAAU,IAC/BG,EAAQN,KAAKI,MAAMC,EAAU,IAC7BE,EAAOD,EAAQ,GAAK,EAAIN,KAAKI,MAAME,EAAQ,IAO3CE,EAASxB,EAHbmB,GAAqB,IADrBE,GAAmB,IADnBC,GAAgB,GAAPC,IAKsB,EAAG,KAAO,IAErCF,EAAU,IACZG,EAASxB,EAASqB,EAAS,EAAG,KAAO,IAAMG,GAGzCL,GAAW,GAAKE,GAAW,IAC7BI,cAAcf,GACVJ,EAAMoB,OACRpB,EAAMoB,QAERhB,EAAQ,KAERc,EAASlB,EAAMqB,SAAW,SAGxBL,EAAQ,IACVE,EAASF,EAAQ,SAAoB,GAATA,EAAa,IAAM,KAG7CC,EAAO,IACTC,EAASD,EAAO,QAAkB,GAARA,EAAY,IAAM,IAC5CZ,GAAgB,GAGdJ,EAAIqB,UACNrB,EAAIqB,QAAQC,UAAYL,GAY5B,OARAZ,KAIID,GAAiBL,EAAMwB,qBACzBpB,EAAQqB,YAAYnB,EAAQ,MAGvB,WACLF,GAASe,cAAcf,MAExB,CAACJ,IAGF,sBAAM0B,UAAW,UAAY1B,EAAM0B,UAAWzB,IAAKA,EAAnD,gBCrEW,SAAS0B,IACtB,IAAMnD,EAASoD,qBAAWtD,GAApBE,KACSqD,cAEf,OACE,eAAC,IAAD,CAAKC,GAAG,WAAWC,SAAS,WAA5B,UACE,cAAC,IAAD,CAAKC,EAAG,EAAR,SACE,eAAC,IAAD,CAAMC,MAAM,SAASC,SAAS,MAAMC,GAAG,OAAOC,UAAU,OAAxD,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,KAAKC,WAAW,OAAOC,EAAG,EAAGC,WAAW,IAAlE,wBAIA,cAAC,IAAD,CAAKC,GAAG,OAAR,SACGlE,IAASA,EAAKC,UACb,kDACa,IACX,cAACsB,EAAD,CACEa,MAAOpC,EAAKO,UAAoC,GAAxBP,EAAKU,iBAAwB,IACrDkC,MAAO,WACLuB,UAAU,iBAId,YAIV,cAAC,IAAD,CAAKZ,SAAS,WAAWa,OAAO,IAAIC,OAAO,MAAMC,MAAM,OAAvD,SACGtE,EACC,cAAC,IAAD,CACEsE,MACEpC,KAAKI,OACDtC,EAAKW,aAAe,GAAKX,EAAKa,UAAUO,OAAU,KAClD,IAENmD,WAAW,kBACXjB,GAAG,WACHkB,EAAE,QAEF,UCzCZ,SAASC,EAAT,GAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACxB,OACE,eAAC,IAAD,CACEC,UAAU,iJACVpB,EAAG,EACHqB,aAAc,EACdC,GAAI,EAJN,UAME,cAAC,IAAD,CAAMC,MAAM,WAAWD,GAAI,EAA3B,SACGJ,IAGH,cAAC,IAAD,CAAMZ,SAAS,MAAMC,WAAW,OAAOE,WAAY,EAAnD,SACGU,OAMM,SAASK,IACtB,IAAMhF,EAASoD,qBAAWtD,GAApBE,KAEFiF,EAAW5B,cAEf,OAAKrD,GAASA,EAAKC,UAQjB,cAAC,IAAD,UACE,eAAC,IAAD,CAAWiF,KAAK,MAAMvB,GAAG,OAAOwB,GAAI,GAApC,UACE,eAAC,IAAD,CAAStB,GAAG,KAAKiB,GAAI,EAArB,+BACqB9E,EAAKY,MAD1B,OAIA,eAAC6D,EAAD,CAAOC,QAAQ,cAAf,UAA8BxC,KAAKI,MAAmB,IAAbtC,EAAKE,OAA9C,OACA,cAACuE,EAAD,CAAOC,QAAQ,mBAAf,SAAmC1E,EAAKG,UACxC,cAACsE,EAAD,CAAOC,QAAQ,cAAf,SACG1E,EAAKS,gBAAkB,GACpByB,KAAKI,MAAMtC,EAAKS,gBAAkB,IAAM,WACxCT,EAAKS,gBAAkB,mBAlBjC2E,YAAW,WACTH,EAAS,OACR,KACI,8B,4CChCI,SAASI,EAAQC,GAC9B,IAAK,IAAIC,EAAID,EAAMlE,OAAS,EAAGmE,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAItD,KAAKI,MAAMJ,KAAKuD,UAAYF,EAAI,IACpCG,EAAOJ,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKE,EAGb,OAAOJ,E,ICPIK,EAAU,I,MAAIC,GAAQ,UAAY5D,KAAKD,MAAO,IAEpD,SAAS8D,EAASC,GACvB,OAAOH,EAAQI,OAAOD,GCWT,SAASE,IACtB,IAAIf,EAAW5B,cAEX,EAAwB4C,oBAAS,GAArC,mBAAKC,EAAL,KAAcC,EAAd,KACI,EAAkBF,oBAAS,GAA/B,mBAAKG,EAAL,KAAWC,EAAX,KACI,EAAgCJ,oBAAS,GAA7C,mBAAKK,EAAL,KAAkBC,EAAlB,KACI,EAAoBnD,qBAAWtD,GAA7BE,EAAN,EAAMA,KAAMiB,EAAZ,EAAYA,QAkDZ,OAhDAU,qBAAU,WACRyD,YAAW,WACTiB,GAAQ,KACP,OACF,IA4CCrG,GACFiF,EAAS,aAAeY,EAAS,IAE1B,8BAIP,cAAC,IAAD,CAAMW,GAAIJ,EAAV,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAWlB,KAAK,MAAMZ,MAAM,OAAOX,GAAG,OAAOwB,GAAI,GAAjD,UACE,cAAC,IAAD,CAAStB,GAAG,KAAZ,SAAkB4C,EAAK7F,QACvB,eAAC,IAAD,CAAMmE,MAAM,WAAW2B,GAAI,EAA3B,2BACgB,mCAASD,EAAK/F,iBAAd,cADhB,6BAKA,cAAC,IAAD,CAAKgG,GAAI,EAAT,SACE,cAAC,IAAD,CACEC,UAAW,cAAC,IAAD,IACXC,YAAY,OACZC,KAAK,KACLC,QAAS,WA9DnBX,GAAW,GAEXf,YAAW,WACTiB,GAAQ,GAERjB,YAAW,WAGT,IAAI/E,EAAgB0G,MAAMC,KAAKD,MAAMN,EAAK5F,UAAUO,QAAQ6F,QAGxDR,EAAKS,sBACP7B,EAAQhF,GAGV,IAAIQ,EAAY4F,EAAK5F,UAGjB4F,EAAKU,4BACPtG,EAAUuG,SAAQ,SAACC,GACbN,MAAMO,QAAQD,EAAStG,UACzBsE,EAAQgC,EAAStG,YAKvBE,EAAQ,2BACHwF,GADE,IAELpG,cAAeA,EACfC,QAAS,GACTC,UAAWyB,KAAKD,MAChBpB,aAAc,EACdE,UAAWA,KAIboE,EAAS,aAAeY,EAAS,MAChC,OACF,MA2BO0B,UAAWrB,EAPb,qBAaF,eAAC,IAAD,CAAKQ,GAAI,GAAI3B,MAAM,WAAnB,UACE,eAAC,IAAD,CACEyC,OAAO,UACPC,OAAQ,CAAEC,eAAgB,aAC1BC,WAAW,OACXb,QAAS,WACPP,GAAgBD,IALpB,UAQGA,EAAc,OAAS,OAR1B,gBAQ+C,IAC5CA,EAAc,cAAC,IAAD,IAAoB,cAAC,IAAD,OAGrC,cAAC,IAAD,CAAUE,GAAIF,EAAd,SACE,cAAC,IAAD,CAAKI,GAAI,EAAT,SACE,eAAC,IAAD,wBACaD,EAAK/F,iBADlB,YAC4C,uBAD5C,cAEc+F,EAAK5F,UAAUO,OAF7B,cAE+C,wC,oCC5GhD,SAASwG,EAAT,GAAqD,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACjD,EAA8B9B,oBAAS,GAA3C,mBAAK+B,EAAL,KAAiBC,EAAjB,KAEA,OACE,eAAC,IAAD,CACEJ,OAAQA,EACRC,QAAS,WACPA,KAHJ,UAME,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,sBACA,cAAC,IAAD,yDACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEI,GAAI,EACJpB,QAAS,WACPgB,KAHJ,oBAQA,cAAC,IAAD,CACElB,YAAY,OACZE,QAAS,WACPmB,GAAc,GACd7C,YAAW,WACT2C,IACA3C,YAAW,WACT6C,GAAc,KACb,OACF,MAELV,UAAWS,EAXb,6BCtBK,SAASG,IACtB,IAAIlD,EAAW5B,cAET+E,EAAWC,cAAXD,OACF,EAAoBhF,qBAAWtD,GAA7BE,EAAN,EAAMA,KAAMiB,EAAZ,EAAYA,QACR,EAAkBgF,oBAAS,GAA/B,mBAAKG,EAAL,KAAWC,EAAX,KAEI,EAA8BJ,oBAAS,GAA3C,mBAAKqC,EAAL,KAAiBC,EAAjB,KAcA,GAZA5G,qBAAU,WACR0E,GAAQ,GACJ,kBAAmBmC,UAAUA,SAASC,cAAcC,OAExDtD,YAAW,WACTiB,GAAQ,GACJrG,GACFiB,EAAQ,2BAAKjB,GAAN,IAAYW,aAAcgI,OAElC,OACF,CAACP,KAECpI,EAIH,OAHAoF,YAAW,WACTH,EAAS,QAEJ,6BAGT,GAAIjF,EAAKC,UAIP,OAHAmF,YAAW,WACTH,EAAS,gBACR,KACI,6BAGT,IHvCuB2D,EGuCnBD,GHvCmBC,EGuCMR,EHtCtBS,SAASlD,EAAQmD,OAAOF,GAAK,GAAK,KGwCrCG,EAAQ/I,EAAKK,cAAcsI,GAE3BtB,EAAWrH,EAAKa,UAAUkI,GAE1B/H,EAAShB,EAAKM,QAAQyI,GAE1B,SAASC,EAAUC,GACjB,IAAIC,EAAU,YAAOlJ,EAAKM,SAC1B4I,EAAWH,GAASE,EAEpBhI,EAAQ,2BACHjB,GADE,IAELM,QAAS4I,KAIb,OAAK7B,EAOH,eAAC,IAAD,WACE,cAACO,EAAD,CACEC,OAAQS,EACRR,QAAS,WACPS,GAAc,IAEhBR,SAAU,WACR3C,YAAW,WACTH,EAAS,aACR,QAIP,cAAC,IAAD,CAAMuB,GAAIJ,EAAV,SACE,eAAC,IAAD,CAAWlB,KAAK,MAAMvB,GAAG,OAAOwB,GAAI,GAApC,UACE,eAAC,IAAD,CAAMJ,MAAM,WAAWD,GAAI,EAA3B,sBACY6D,EAAgB,KAE5B,cAAC,IAAD,CAAS9E,GAAG,KAAKiB,GAAI,EAArB,SACGuC,EAASzG,QAGO,mBAAlByG,EAASvG,KACR,cAAC,IAAD,UACGuG,EAAStG,QAAQoI,KAAI,SAACC,EAAQ7D,GAC7B,OACE,cAAC,IAAD,CAAaT,GAAI,EAAjB,SACE,eAAC,IAAD,CACER,MAAM,OACN+E,eAAe,aACfvC,QAAS,WACPkC,EAAUI,IAJd,UAOE,cAAC,IAAD,CACEzB,WAAW,OACX2B,UAAWF,GAAUpI,IAEvB,cAAC,IAAD,CAAMkD,GAAI,EAAGD,WAAW,IAAIyC,GAAG,MAA/B,SACG0C,QAbG7D,QAqBhB,cAAC,IAAD,UACE,cAAC,IAAD,CACEgE,QAAS,SAACC,GACRR,EAAUQ,EAAEC,OAAOC,QAErBA,MAAO1I,GAAU,GACjB2I,YAAY,+BAKlB,cAAC,IAAD,CAAKjD,GAAI,EAAT,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMF,GAAsB,IAAlBmC,EAAV,SACE,cAAC,IAAD,CACET,GAAI,EACJ0B,SAAU,cAAC,IAAD,IACV9C,QAAS,WACPT,GAAQ,GAERjB,YAAW,WACTH,EAAS,aAAeY,EAAS8C,EAAgB,MAChD,MARP,oBAeF,cAAC,IAAD,CAAKzE,GAAG,OAAR,SACGyE,IAAkB3I,EAAKa,UAAUO,OAAS,EACzC,cAAC,IAAD,CACE8C,GAAG,OACH0C,YAAY,OACZE,QAAS,WACPyB,GAAc,IAJlB,oBAUA,cAAC,IAAD,CACErE,GAAG,OACHyC,UAAW,cAAC,IAAD,IACXC,YAAY,OACZE,QAAS,WACPT,GAAQ,GACRjB,YAAW,WACTH,EAAS,aAAeY,EAAS8C,EAAgB,MAChD,MARP,2CA9Fd1D,EAAS,KAEF,4BAAI4E,KAAKC,UAAU9J,M,YC/Df,SAAS+J,IACtB,IAAI,EAAoB3G,qBAAWtD,GAA7BE,EAAN,EAAMA,KAAMiB,EAAZ,EAAYA,QACRgE,EAAW5B,cA0Cf,OAxCA1B,qBAAU,WAIR,IAHA,IAAIxB,EAAU,EACVC,EAAmB,GAEdmF,EAAI,EAAGA,EAAIvF,EAAKM,QAAQc,OAAQmE,IAAK,CAC5C,IAAIyE,EAAiBhK,EAAKa,UAAU0E,GAAGjF,SAAW,CAChDN,EAAKa,UAAU0E,GAAGvE,QAEhBiJ,EAAcjK,EAAKM,QAAQiF,GAG7ByE,EACGb,KAAI,SAACnI,GAAD,OAAaA,EAAS,IAAIkJ,iBAC9BC,UAAUF,EAAc,IAAIC,eAG/B/J,IAEAC,EAAiBgK,KAAK7E,GAI1B,IAAIrF,EAAQC,EAAUH,EAAKa,UAAUO,OAErCH,EAAQ,2BACHjB,GADE,IAELE,MAAOA,EACPC,QAASA,EACTC,iBAAkBA,EAClBH,WAAW,EACXO,QAASwB,KAAKD,MACdtB,gBAAiByB,KAAKI,OAAON,KAAKD,MAAQ/B,EAAKO,WAAa,KAC5DI,cAAe,KAGjByE,YAAW,WACTH,EAAS,gBACR,QACF,IAGD,mCACE,cAAC,IAAD,CAAKoF,UAAU,SAAStF,MAAM,WAAW2B,GAAI,GAA7C,SACE,cAAC,IAAD,QC5CO,SAAS4D,IACtB,OACE,eAAC,IAAD,WACE,cAACnH,EAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoH,KAAK,IAAIC,QAAS,cAACxE,EAAD,MACzB,cAAC,IAAD,CAAOuE,KAAK,oBAAoBC,QAAS,cAACrC,EAAD,MACzC,cAAC,IAAD,CAAOoC,KAAK,aAAaC,QAAS,cAACxF,EAAD,MAClC,cAAC,IAAD,CAAOuF,KAAK,UAAUC,QAAS,cAACT,EAAD,YCOxBU,MAlBf,WACE,IAAI,EAAkBxE,qBAAtB,mBAAKjG,EAAL,KAAWiB,EAAX,KAEIyJ,EAAYC,mBAAQ,WACtB,MAAO,CAAE3K,OAAMiB,aACd,CAACjB,IAEJ,OACE,cAACF,EAAY8K,SAAb,CAAsBlB,MAAOgB,EAA7B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeG,SAAUC,oBAAzB,SACE,cAACR,EAAD,WCLKS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,SAM1BZ,K","file":"static/js/main.5c063e0c.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const QuizContext = createContext({\n  quiz: {\n    completed: false,\n    score: 0,\n    correct: 0,\n    incorrectAnswers: [],\n    questionOrder: [],\n    answers: [],\n    startTime: 0,\n    endTime: 0,\n    durationSeconds: 0,\n    timeLimitMinutes: 0,\n    currentIndex: -1,\n    title: \"\",\n    questions: [\n      {\n        type: \"\",\n        choices: [],\n        answer: \"\",\n        answers: [],\n      },\n    ],\n  },\n  setQuiz: (quiz) => {},\n});\n","import { useEffect, useRef } from \"react\";\r\n\r\nfunction padStart(subject, length, char) {\r\n  subject = subject.toString();\r\n\r\n  while (subject.length < length) {\r\n    subject = char + subject;\r\n  }\r\n\r\n  return subject;\r\n}\r\n\r\nexport default function Countdown(props) {\r\n  var ref = useRef();\r\n\r\n  useEffect(() => {\r\n    var needsInterval = true;\r\n\r\n    function update() {\r\n      var now = Date.now();\r\n      var ms = Math.max(0, props.endAt - now);\r\n\r\n      var seconds = Math.floor(ms / 1000);\r\n      var minutes = Math.floor(seconds / 60);\r\n      var hours = Math.floor(minutes / 60);\r\n      var days = hours < 24 ? 0 : Math.floor(hours / 24);\r\n\r\n      hours -= days * 24;\r\n      minutes -= hours * 60;\r\n      seconds -= minutes * 60;\r\n\r\n      // MM:SSs\r\n      var string = padStart(seconds, 2, \"0\") + \"s\";\r\n\r\n      if (minutes > 0) {\r\n        string = padStart(minutes, 2, \"0\") + \":\" + string;\r\n      }\r\n\r\n      if (seconds <= 0 && minutes <= 0) {\r\n        clearInterval(timer);\r\n        if (props.onEnd) {\r\n          props.onEnd();\r\n        }\r\n        timer = null;\r\n\r\n        string = props.endText || \"0:00s\";\r\n      }\r\n\r\n      if (hours > 0) {\r\n        string = hours + \" hour\" + (hours != 1 ? \"s\" : \"\");\r\n      }\r\n\r\n      if (days > 0) {\r\n        string = days + \" day\" + (days != 1 ? \"s\" : \"\");\r\n        needsInterval = false;\r\n      }\r\n\r\n      if (ref.current) {\r\n        ref.current.innerText = string;\r\n      }\r\n    }\r\n\r\n    update();\r\n\r\n    var timer;\r\n\r\n    if (needsInterval || props.alwaysCreateTimer) {\r\n      timer = setInterval(update, 1000);\r\n    }\r\n\r\n    return () => {\r\n      timer && clearInterval(timer);\r\n    };\r\n  }, [props]);\r\n\r\n  return (\r\n    <span className={\"number \" + props.className} ref={ref}>\r\n      --\r\n    </span>\r\n  );\r\n}\r\n","import Icon from \"@chakra-ui/icon\";\nimport { Box, Container, Flex, Heading, Text } from \"@chakra-ui/layout\";\nimport { useContext } from \"react\";\nimport { QuizContext } from \"../QuizContext\";\nimport Countdown from \"./Countdown\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Nav() {\n  var { quiz } = useContext(QuizContext);\n  var navigate = useNavigate();\n\n  return (\n    <Box bg=\"gray.200\" position=\"relative\">\n      <Box p={4}>\n        <Flex align=\"center\" maxWidth=\"2xl\" mx=\"auto\" minHeight=\"36px\">\n          <Heading as=\"h1\" fontSize=\"lg\" fontWeight=\"bold\" m={0} lineHeight=\"1\">\n            React Quiz\n          </Heading>\n\n          <Box ml=\"auto\">\n            {quiz && !quiz.completed ? (\n              <>\n                Time left:{\" \"}\n                <Countdown\n                  endAt={quiz.startTime + quiz.timeLimitMinutes * 60 * 1000}\n                  onEnd={() => {\n                    navigator(\"/submit\");\n                  }}\n                />\n              </>\n            ) : null}\n          </Box>\n        </Flex>\n      </Box>\n      <Box position=\"absolute\" bottom=\"0\" height=\"2px\" width=\"100%\">\n        {quiz ? (\n          <Box\n            width={\n              Math.floor(\n                ((quiz.currentIndex + 1) / quiz.questions.length) * 100\n              ) + \"%\"\n            }\n            transition=\"width 0.3s ease\"\n            bg=\"blue.400\"\n            h=\"2px\"\n          ></Box>\n        ) : null}\n      </Box>\n    </Box>\n  );\n}\n","import { Box, Container, Heading, Text } from \"@chakra-ui/react\";\nimport { useContext } from \"react\";\nimport { QuizContext } from \"../QuizContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Panel({ heading, children }) {\n  return (\n    <Box\n      boxShadow=\"rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.1) 0px 4px 6px -4px\"\n      p={6}\n      borderRadius={4}\n      mb={8}\n    >\n      <Text color=\"gray.500\" mb={2}>\n        {heading}\n      </Text>\n\n      <Text fontSize=\"4xl\" fontWeight=\"bold\" lineHeight={1}>\n        {children}\n      </Text>\n    </Box>\n  );\n}\n\nexport default function CompletedPage() {\n  var { quiz } = useContext(QuizContext);\n\n  var navigate = useNavigate();\n\n  if (!quiz || !quiz.completed) {\n    setTimeout(() => {\n      navigate(\"/\");\n    }, 200);\n    return <></>;\n  }\n\n  return (\n    <Box>\n      <Container maxW=\"2xl\" mx=\"auto\" my={20}>\n        <Heading as=\"h1\" mb={8}>\n          You completed the {quiz.title}.\n        </Heading>\n\n        <Panel heading=\"You scored:\">{Math.floor(quiz.score * 100)}%</Panel>\n        <Panel heading=\"Correct answers:\">{quiz.correct}</Panel>\n        <Panel heading=\"Time taken:\">\n          {quiz.durationSeconds > 60\n            ? Math.floor(quiz.durationSeconds / 60) + \" minutes\"\n            : quiz.durationSeconds + \" seconds\"}\n        </Panel>\n      </Container>\n    </Box>\n  );\n}\n","/* Randomize array in-place using Durstenfeld shuffle algorithm */\nexport default function shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n","import HashIds from \"hashids\";\n\nexport const hashIds = new HashIds(\"My Salt\" + Date.now(), 10);\n\nexport function encodeId(id) {\n  return hashIds.encode(id);\n}\n\nexport function decodeId(str) {\n  return parseInt(hashIds.decode(str)[0] + \"\");\n}\n","import { Button } from \"@chakra-ui/button\";\nimport {\n  ArrowForwardIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"@chakra-ui/icons\";\nimport { Box, Container, Heading, Text } from \"@chakra-ui/layout\";\nimport { Link } from \"react-router-dom\";\nimport Quiz from \"./Quiz.json\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Fade, Collapse } from \"@chakra-ui/transition\";\nimport { QuizContext } from \"../QuizContext\";\nimport shuffle from \"../shuffle\";\nimport { encodeId } from \"../HashIds\";\n\nexport default function IndexPage() {\n  var navigate = useNavigate();\n\n  var [loading, setLoading] = useState(false);\n  var [show, setShow] = useState(false);\n  var [showDetails, setShowDetails] = useState(false);\n  var { quiz, setQuiz } = useContext(QuizContext);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShow(true);\n    }, 100);\n  }, []);\n\n  function start() {\n    setLoading(true);\n\n    setTimeout(() => {\n      setShow(false);\n\n      setTimeout(() => {\n        // START THE QUIZ\n\n        var questionOrder = Array.from(Array(Quiz.questions.length).keys());\n\n        // Shuffle question order if enabled\n        if (Quiz.shuffleQuestionOrder) {\n          shuffle(questionOrder);\n        }\n\n        var questions = Quiz.questions;\n\n        // Shuffle multiple choice order if enabled\n        if (Quiz.shuffleMultipleChoiceOrder) {\n          questions.forEach((question) => {\n            if (Array.isArray(question.choices)) {\n              shuffle(question.choices);\n            }\n          });\n        }\n\n        setQuiz({\n          ...Quiz,\n          questionOrder: questionOrder,\n          answers: [],\n          startTime: Date.now(),\n          currentIndex: 0,\n          questions: questions,\n        });\n\n        // Go to first question\n        navigate(\"/question/\" + encodeId(0));\n      }, 500);\n    }, 300);\n  }\n\n  if (quiz) {\n    navigate(\"/question/\" + encodeId(0));\n\n    return <></>;\n  }\n\n  return (\n    <Fade in={show}>\n      <Box>\n        <Container maxW=\"2xl\" width=\"100%\" mx=\"auto\" my={20}>\n          <Heading as=\"h1\">{Quiz.title}</Heading>\n          <Text color=\"gray.500\" mt={2}>\n            You will have <strong>{Quiz.timeLimitMinutes} minutes</strong> to\n            complete this quiz.\n          </Text>\n\n          <Box mt={8}>\n            <Button\n              rightIcon={<ArrowForwardIcon />}\n              colorScheme=\"blue\"\n              size=\"lg\"\n              onClick={() => {\n                start();\n              }}\n              isLoading={loading}\n            >\n              Start\n            </Button>\n          </Box>\n\n          <Box mt={40} color=\"gray.500\">\n            <Text\n              cursor=\"pointer\"\n              _hover={{ textDecoration: \"underline\" }}\n              userSelect=\"none\"\n              onClick={() => {\n                setShowDetails(!showDetails);\n              }}\n            >\n              {showDetails ? \"Hide\" : \"View\"} more details{\" \"}\n              {showDetails ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            </Text>\n\n            <Collapse in={showDetails}>\n              <Box mt={4}>\n                <Text>\n                  Duration: {Quiz.timeLimitMinutes} minutes <br />\n                  Questions: {Quiz.questions.length} questions <br />\n                </Text>\n              </Box>\n            </Collapse>\n          </Box>\n        </Container>\n      </Box>\n    </Fade>\n  );\n}\n","import {\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\nexport default function SubmitModal({ isOpen, onClose, onSubmit }) {\n  var [submitting, setSubmitting] = useState(false);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        onClose();\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Confirm</ModalHeader>\n        <ModalBody>Are you sure you want to submit your quiz?</ModalBody>\n        <ModalFooter>\n          <Button\n            mr={2}\n            onClick={() => {\n              onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            colorScheme=\"blue\"\n            onClick={() => {\n              setSubmitting(true);\n              setTimeout(() => {\n                onSubmit();\n                setTimeout(() => {\n                  setSubmitting(false);\n                }, 1000);\n              }, 300);\n            }}\n            isLoading={submitting}\n          >\n            Submit\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { Button } from \"@chakra-ui/button\";\nimport { ArrowBackIcon, ArrowForwardIcon } from \"@chakra-ui/icons\";\nimport { Box, Container, Flex, Heading, Text } from \"@chakra-ui/layout\";\nimport { useParams } from \"react-router-dom\";\nimport { Checkbox } from \"@chakra-ui/checkbox\";\nimport { Fade, Input } from \"@chakra-ui/react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { QuizContext } from \"../QuizContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { decodeId, encodeId } from \"../HashIds\";\nimport SubmitModal from \"../components/SubmitModal\";\n\nexport default function QuestionPage() {\n  var navigate = useNavigate();\n\n  var { number } = useParams();\n  var { quiz, setQuiz } = useContext(QuizContext);\n  var [show, setShow] = useState(false);\n\n  var [showSubmit, setShowSubmit] = useState(false);\n\n  useEffect(() => {\n    setShow(false);\n    if (\"activeElement\" in document) document.activeElement.blur();\n\n    setTimeout(() => {\n      setShow(true);\n      if (quiz) {\n        setQuiz({ ...quiz, currentIndex: decodedNumber });\n      }\n    }, 100);\n  }, [number]);\n\n  if (!quiz) {\n    setTimeout(() => {\n      navigate(\"/\");\n    });\n    return <></>;\n  }\n\n  if (quiz.completed) {\n    setTimeout(() => {\n      navigate(\"/completed\");\n    }, 100);\n    return <></>;\n  }\n\n  var decodedNumber = decodeId(number);\n\n  var index = quiz.questionOrder[decodedNumber];\n\n  var question = quiz.questions[index];\n\n  var answer = quiz.answers[index];\n\n  function setAnswer(newAnswer) {\n    var newAnswers = [...quiz.answers];\n    newAnswers[index] = newAnswer;\n\n    setQuiz({\n      ...quiz,\n      answers: newAnswers,\n    });\n  }\n\n  if (!question) {\n    navigate(\"/\");\n\n    return <p>{JSON.stringify(quiz)}</p>;\n  }\n\n  return (\n    <Box>\n      <SubmitModal\n        isOpen={showSubmit}\n        onClose={() => {\n          setShowSubmit(false);\n        }}\n        onSubmit={() => {\n          setTimeout(() => {\n            navigate(\"/submit\");\n          }, 300);\n        }}\n      />\n\n      <Fade in={show}>\n        <Container maxW=\"2xl\" mx=\"auto\" my={20}>\n          <Text color=\"gray.500\" mb={1}>\n            Question {decodedNumber + 1}\n          </Text>\n          <Heading as=\"h1\" mb={4}>\n            {question.title}\n          </Heading>\n\n          {question.type === \"multipleChoice\" ? (\n            <Box>\n              {question.choices.map((choice, i) => {\n                return (\n                  <Box key={i} mb={2}>\n                    <Button\n                      width=\"100%\"\n                      justifyContent=\"flex-start\"\n                      onClick={() => {\n                        setAnswer(choice);\n                      }}\n                    >\n                      <Checkbox\n                        userSelect=\"none\"\n                        isChecked={choice == answer}\n                      />\n                      <Text ml={2} lineHeight=\"1\" mt=\"3px\">\n                        {choice}\n                      </Text>\n                    </Button>\n                  </Box>\n                );\n              })}\n            </Box>\n          ) : (\n            <Box>\n              <Input\n                onInput={(e) => {\n                  setAnswer(e.target.value);\n                }}\n                value={answer || \"\"}\n                placeholder=\"Type your answer here...\"\n              ></Input>\n            </Box>\n          )}\n\n          <Box mt={8}>\n            <Flex>\n              <Fade in={decodedNumber !== 0}>\n                <Button\n                  mr={1}\n                  leftIcon={<ArrowBackIcon />}\n                  onClick={() => {\n                    setShow(false);\n\n                    setTimeout(() => {\n                      navigate(\"/question/\" + encodeId(decodedNumber - 1));\n                    }, 500);\n                  }}\n                >\n                  Back\n                </Button>\n              </Fade>\n\n              <Box ml=\"auto\">\n                {decodedNumber === quiz.questions.length - 1 ? (\n                  <Button\n                    ml=\"auto\"\n                    colorScheme=\"blue\"\n                    onClick={() => {\n                      setShowSubmit(true);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                ) : (\n                  <Button\n                    ml=\"auto\"\n                    rightIcon={<ArrowForwardIcon />}\n                    colorScheme=\"blue\"\n                    onClick={() => {\n                      setShow(false);\n                      setTimeout(() => {\n                        navigate(\"/question/\" + encodeId(decodedNumber + 1));\n                      }, 500);\n                    }}\n                  >\n                    Next Question\n                  </Button>\n                )}\n              </Box>\n            </Flex>\n          </Box>\n        </Container>\n      </Fade>\n    </Box>\n  );\n}\n","import { useContext, useEffect } from \"react\";\nimport { QuizContext } from \"../QuizContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box, Spinner } from \"@chakra-ui/react\";\n\nexport default function SubmitPage() {\n  var { quiz, setQuiz } = useContext(QuizContext);\n  var navigate = useNavigate();\n\n  useEffect(() => {\n    var correct = 0;\n    var incorrectAnswers = [];\n\n    for (var i = 0; i < quiz.answers.length; i++) {\n      var correctAnswers = quiz.questions[i].answers || [\n        quiz.questions[i].answer,\n      ];\n      var givenAnswer = quiz.answers[i];\n\n      if (\n        correctAnswers\n          .map((answer) => (answer + \"\").toLowerCase())\n          .includes((givenAnswer + \"\").toLowerCase())\n      ) {\n        // correct\n        correct++;\n      } else {\n        incorrectAnswers.push(i);\n      }\n    }\n\n    var score = correct / quiz.questions.length;\n\n    setQuiz({\n      ...quiz,\n      score: score,\n      correct: correct,\n      incorrectAnswers: incorrectAnswers,\n      completed: true,\n      endTime: Date.now(),\n      durationSeconds: Math.floor((Date.now() - quiz.startTime) / 1000),\n      currentIndex: -1,\n    });\n\n    setTimeout(() => {\n      navigate(\"/completed\");\n    }, 1500);\n  }, []);\n\n  return (\n    <>\n      <Box textAlign=\"center\" color=\"gray.500\" mt={20}>\n        <Spinner />\n      </Box>\n    </>\n  );\n}\n","import { Box } from \"@chakra-ui/layout\";\nimport { Route, Routes } from \"react-router\";\nimport Nav from \"./components/Nav\";\nimport CompletedPage from \"./pages/CompletedPage\";\nimport IndexPage from \"./pages/IndexPage\";\nimport QuestionPage from \"./pages/QuestionPage\";\nimport SubmitPage from \"./pages/SubmitPage\";\n\nexport default function AppRouter() {\n  return (\n    <Box>\n      <Nav />\n\n      <Routes>\n        <Route path=\"/\" element={<IndexPage />} />\n        <Route path=\"/question/:number\" element={<QuestionPage />} />\n        <Route path=\"/completed\" element={<CompletedPage />} />\n        <Route path=\"/submit\" element={<SubmitPage />} />\n      </Routes>\n    </Box>\n  );\n}\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { useMemo, useState } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./AppRouter\";\nimport { QuizContext } from \"./QuizContext\";\n\nfunction App() {\n  var [quiz, setQuiz] = useState();\n\n  var quizValue = useMemo(() => {\n    return { quiz, setQuiz };\n  }, [quiz]);\n\n  return (\n    <QuizContext.Provider value={quizValue}>\n      <ChakraProvider>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <AppRouter />\n        </BrowserRouter>\n      </ChakraProvider>\n    </QuizContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}